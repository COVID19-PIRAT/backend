# name: Postgres service example
# on: push

# jobs:
#   # Label of the container job
#   container-job:
#     # Containers must run in Linux based operating systems
#     runs-on: ubuntu-latest
#     # Docker Hub image that `container-job` executes in
#     container: node:10.18-jessie

#     # Service containers to run with `container-job`
#     services:
#       # Label used to access the service container
#       postgres:
#         # Docker Hub image
#         image: postgres
#         # Provide the password for postgres
#         env:
#           POSTGRES_PASSWORD: postgres
#         # Set health checks to wait until postgres has started
#         options: >-
#           --health-cmd pg_isready
#           --health-interval 10s
#           --health-timeout 5s
#           --health-retries 5

#     steps:
#       # Downloads a copy of the code in the repository before running CI tests
#       - name: Check out repository code
#         uses: actions/checkout@v1

#       # Performs a clean installation of all dependencies in the `package.json` file
#       # For more information, see https://docs.npmjs.com/cli/ci.html
#       - name: Install dependencies
#         run: npm ci
#         working-directory: ./postgres

#       - name: Connect to PostgreSQL
#         # Runs a script that creates a PostgreSQL client, populates
#         # the client with data, and retrieves data
#         run: node client.js
#         working-directory: ./postgres
#         # Environment variable used by the `client.js` script to create a new PostgreSQL client.
#         env:
#           # The hostname used to communicate with the PostgreSQL service container
#           POSTGRES_HOST: postgres
#           # The default PostgreSQL port
#           POSTGRES_PORT: 5432
